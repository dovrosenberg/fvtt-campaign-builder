/* tslint:disable */
/* eslint-disable */
/**
 * fvtt-fcb-backend
 * Backend for advanced capabilities for fvtt-campaign-builder Foundry module
 *
 * The version of the OpenAPI document: 0.0.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ApiCharacterGenerateImagePost200Response } from '../types';
// @ts-ignore
import type { ApiCharacterGeneratePost200Response } from '../types';
// @ts-ignore
import type { ApiCharacterGeneratePostRequest } from '../types';
// @ts-ignore
import type { ApiLocationGeneratePost200Response } from '../types';
// @ts-ignore
import type { ApiLocationGeneratePostRequest } from '../types';
// @ts-ignore
import type { ApiNameCharactersPost200Response } from '../types';
// @ts-ignore
import type { ApiNameCharactersPostRequest } from '../types';
// @ts-ignore
import type { ApiNameStoresPost200Response } from '../types';
// @ts-ignore
import type { ApiNameStoresPostRequest } from '../types';
// @ts-ignore
import type { ApiNameTavernsPost200Response } from '../types';
// @ts-ignore
import type { ApiNameTavernsPostRequest } from '../types';
// @ts-ignore
import type { ApiNameTownsPost200Response } from '../types';
// @ts-ignore
import type { ApiNameTownsPostRequest } from '../types';
// @ts-ignore
import type { ApiOrganizationGeneratePost200Response } from '../types';
// @ts-ignore
import type { ApiOrganizationGeneratePostRequest } from '../types';
// @ts-ignore
import type { ApiVersionGet200Response } from '../types';
/**
 * FCBApi - axios parameter creator
 * @export
 */
export const FCBApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Generate a character image
         * @param {ApiCharacterGeneratePostRequest} apiCharacterGeneratePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCharacterGenerateImagePost: async (apiCharacterGeneratePostRequest: ApiCharacterGeneratePostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiCharacterGeneratePostRequest' is not null or undefined
            assertParamExists('apiCharacterGenerateImagePost', 'apiCharacterGeneratePostRequest', apiCharacterGeneratePostRequest)
            const localVarPath = `/api/character/generate-image`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiCharacterGeneratePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generate a character
         * @param {ApiCharacterGeneratePostRequest} apiCharacterGeneratePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCharacterGeneratePost: async (apiCharacterGeneratePostRequest: ApiCharacterGeneratePostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiCharacterGeneratePostRequest' is not null or undefined
            assertParamExists('apiCharacterGeneratePost', 'apiCharacterGeneratePostRequest', apiCharacterGeneratePostRequest)
            const localVarPath = `/api/character/generate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiCharacterGeneratePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generate a location image
         * @param {ApiLocationGeneratePostRequest} apiLocationGeneratePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLocationGenerateImagePost: async (apiLocationGeneratePostRequest: ApiLocationGeneratePostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiLocationGeneratePostRequest' is not null or undefined
            assertParamExists('apiLocationGenerateImagePost', 'apiLocationGeneratePostRequest', apiLocationGeneratePostRequest)
            const localVarPath = `/api/location/generate-image`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiLocationGeneratePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generate a location
         * @param {ApiLocationGeneratePostRequest} apiLocationGeneratePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLocationGeneratePost: async (apiLocationGeneratePostRequest: ApiLocationGeneratePostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiLocationGeneratePostRequest' is not null or undefined
            assertParamExists('apiLocationGeneratePost', 'apiLocationGeneratePostRequest', apiLocationGeneratePostRequest)
            const localVarPath = `/api/location/generate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiLocationGeneratePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generate character names
         * @param {ApiNameCharactersPostRequest} apiNameCharactersPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNameCharactersPost: async (apiNameCharactersPostRequest: ApiNameCharactersPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiNameCharactersPostRequest' is not null or undefined
            assertParamExists('apiNameCharactersPost', 'apiNameCharactersPostRequest', apiNameCharactersPostRequest)
            const localVarPath = `/api/name/characters`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiNameCharactersPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generate store names
         * @param {ApiNameStoresPostRequest} apiNameStoresPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNameStoresPost: async (apiNameStoresPostRequest: ApiNameStoresPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiNameStoresPostRequest' is not null or undefined
            assertParamExists('apiNameStoresPost', 'apiNameStoresPostRequest', apiNameStoresPostRequest)
            const localVarPath = `/api/name/stores`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiNameStoresPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generate tavern names
         * @param {ApiNameTavernsPostRequest} apiNameTavernsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNameTavernsPost: async (apiNameTavernsPostRequest: ApiNameTavernsPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiNameTavernsPostRequest' is not null or undefined
            assertParamExists('apiNameTavernsPost', 'apiNameTavernsPostRequest', apiNameTavernsPostRequest)
            const localVarPath = `/api/name/taverns`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiNameTavernsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generate town names
         * @param {ApiNameTownsPostRequest} apiNameTownsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNameTownsPost: async (apiNameTownsPostRequest: ApiNameTownsPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiNameTownsPostRequest' is not null or undefined
            assertParamExists('apiNameTownsPost', 'apiNameTownsPostRequest', apiNameTownsPostRequest)
            const localVarPath = `/api/name/towns`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiNameTownsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generate an organization image
         * @param {ApiOrganizationGeneratePostRequest} apiOrganizationGeneratePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrganizationGenerateImagePost: async (apiOrganizationGeneratePostRequest: ApiOrganizationGeneratePostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiOrganizationGeneratePostRequest' is not null or undefined
            assertParamExists('apiOrganizationGenerateImagePost', 'apiOrganizationGeneratePostRequest', apiOrganizationGeneratePostRequest)
            const localVarPath = `/api/organization/generate-image`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiOrganizationGeneratePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generate an organization
         * @param {ApiOrganizationGeneratePostRequest} apiOrganizationGeneratePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrganizationGeneratePost: async (apiOrganizationGeneratePostRequest: ApiOrganizationGeneratePostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiOrganizationGeneratePostRequest' is not null or undefined
            assertParamExists('apiOrganizationGeneratePost', 'apiOrganizationGeneratePostRequest', apiOrganizationGeneratePostRequest)
            const localVarPath = `/api/organization/generate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiOrganizationGeneratePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get current backend version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVersionGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/version`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FCBApi - functional programming interface
 * @export
 */
export const FCBApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FCBApiAxiosParamCreator(configuration)
    return {
        /**
         * Generate a character image
         * @param {ApiCharacterGeneratePostRequest} apiCharacterGeneratePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCharacterGenerateImagePost(apiCharacterGeneratePostRequest: ApiCharacterGeneratePostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiCharacterGenerateImagePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCharacterGenerateImagePost(apiCharacterGeneratePostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FCBApi.apiCharacterGenerateImagePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Generate a character
         * @param {ApiCharacterGeneratePostRequest} apiCharacterGeneratePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCharacterGeneratePost(apiCharacterGeneratePostRequest: ApiCharacterGeneratePostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiCharacterGeneratePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCharacterGeneratePost(apiCharacterGeneratePostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FCBApi.apiCharacterGeneratePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Generate a location image
         * @param {ApiLocationGeneratePostRequest} apiLocationGeneratePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLocationGenerateImagePost(apiLocationGeneratePostRequest: ApiLocationGeneratePostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiCharacterGenerateImagePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLocationGenerateImagePost(apiLocationGeneratePostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FCBApi.apiLocationGenerateImagePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Generate a location
         * @param {ApiLocationGeneratePostRequest} apiLocationGeneratePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLocationGeneratePost(apiLocationGeneratePostRequest: ApiLocationGeneratePostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiLocationGeneratePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLocationGeneratePost(apiLocationGeneratePostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FCBApi.apiLocationGeneratePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Generate character names
         * @param {ApiNameCharactersPostRequest} apiNameCharactersPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiNameCharactersPost(apiNameCharactersPostRequest: ApiNameCharactersPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiNameCharactersPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiNameCharactersPost(apiNameCharactersPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FCBApi.apiNameCharactersPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Generate store names
         * @param {ApiNameStoresPostRequest} apiNameStoresPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiNameStoresPost(apiNameStoresPostRequest: ApiNameStoresPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiNameStoresPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiNameStoresPost(apiNameStoresPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FCBApi.apiNameStoresPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Generate tavern names
         * @param {ApiNameTavernsPostRequest} apiNameTavernsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiNameTavernsPost(apiNameTavernsPostRequest: ApiNameTavernsPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiNameTavernsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiNameTavernsPost(apiNameTavernsPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FCBApi.apiNameTavernsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Generate town names
         * @param {ApiNameTownsPostRequest} apiNameTownsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiNameTownsPost(apiNameTownsPostRequest: ApiNameTownsPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiNameTownsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiNameTownsPost(apiNameTownsPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FCBApi.apiNameTownsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Generate an organization image
         * @param {ApiOrganizationGeneratePostRequest} apiOrganizationGeneratePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOrganizationGenerateImagePost(apiOrganizationGeneratePostRequest: ApiOrganizationGeneratePostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiCharacterGenerateImagePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOrganizationGenerateImagePost(apiOrganizationGeneratePostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FCBApi.apiOrganizationGenerateImagePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Generate an organization
         * @param {ApiOrganizationGeneratePostRequest} apiOrganizationGeneratePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOrganizationGeneratePost(apiOrganizationGeneratePostRequest: ApiOrganizationGeneratePostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiOrganizationGeneratePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOrganizationGeneratePost(apiOrganizationGeneratePostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FCBApi.apiOrganizationGeneratePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get current backend version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVersionGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiVersionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiVersionGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FCBApi.apiVersionGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FCBApi - factory interface
 * @export
 */
export const FCBApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FCBApiFp(configuration)
    return {
        /**
         * Generate a character image
         * @param {ApiCharacterGeneratePostRequest} apiCharacterGeneratePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCharacterGenerateImagePost(apiCharacterGeneratePostRequest: ApiCharacterGeneratePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiCharacterGenerateImagePost200Response> {
            return localVarFp.apiCharacterGenerateImagePost(apiCharacterGeneratePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Generate a character
         * @param {ApiCharacterGeneratePostRequest} apiCharacterGeneratePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCharacterGeneratePost(apiCharacterGeneratePostRequest: ApiCharacterGeneratePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiCharacterGeneratePost200Response> {
            return localVarFp.apiCharacterGeneratePost(apiCharacterGeneratePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Generate a location image
         * @param {ApiLocationGeneratePostRequest} apiLocationGeneratePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLocationGenerateImagePost(apiLocationGeneratePostRequest: ApiLocationGeneratePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiCharacterGenerateImagePost200Response> {
            return localVarFp.apiLocationGenerateImagePost(apiLocationGeneratePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Generate a location
         * @param {ApiLocationGeneratePostRequest} apiLocationGeneratePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLocationGeneratePost(apiLocationGeneratePostRequest: ApiLocationGeneratePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiLocationGeneratePost200Response> {
            return localVarFp.apiLocationGeneratePost(apiLocationGeneratePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Generate character names
         * @param {ApiNameCharactersPostRequest} apiNameCharactersPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNameCharactersPost(apiNameCharactersPostRequest: ApiNameCharactersPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiNameCharactersPost200Response> {
            return localVarFp.apiNameCharactersPost(apiNameCharactersPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Generate store names
         * @param {ApiNameStoresPostRequest} apiNameStoresPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNameStoresPost(apiNameStoresPostRequest: ApiNameStoresPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiNameStoresPost200Response> {
            return localVarFp.apiNameStoresPost(apiNameStoresPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Generate tavern names
         * @param {ApiNameTavernsPostRequest} apiNameTavernsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNameTavernsPost(apiNameTavernsPostRequest: ApiNameTavernsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiNameTavernsPost200Response> {
            return localVarFp.apiNameTavernsPost(apiNameTavernsPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Generate town names
         * @param {ApiNameTownsPostRequest} apiNameTownsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNameTownsPost(apiNameTownsPostRequest: ApiNameTownsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiNameTownsPost200Response> {
            return localVarFp.apiNameTownsPost(apiNameTownsPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Generate an organization image
         * @param {ApiOrganizationGeneratePostRequest} apiOrganizationGeneratePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrganizationGenerateImagePost(apiOrganizationGeneratePostRequest: ApiOrganizationGeneratePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiCharacterGenerateImagePost200Response> {
            return localVarFp.apiOrganizationGenerateImagePost(apiOrganizationGeneratePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Generate an organization
         * @param {ApiOrganizationGeneratePostRequest} apiOrganizationGeneratePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrganizationGeneratePost(apiOrganizationGeneratePostRequest: ApiOrganizationGeneratePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiOrganizationGeneratePost200Response> {
            return localVarFp.apiOrganizationGeneratePost(apiOrganizationGeneratePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get current backend version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVersionGet(options?: RawAxiosRequestConfig): AxiosPromise<ApiVersionGet200Response> {
            return localVarFp.apiVersionGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FCBApi - interface
 * @export
 * @interface FCBApi
 */
export interface FCBApiInterface {
    /**
     * Generate a character image
     * @param {ApiCharacterGeneratePostRequest} apiCharacterGeneratePostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FCBApiInterface
     */
    apiCharacterGenerateImagePost(apiCharacterGeneratePostRequest: ApiCharacterGeneratePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiCharacterGenerateImagePost200Response>;

    /**
     * Generate a character
     * @param {ApiCharacterGeneratePostRequest} apiCharacterGeneratePostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FCBApiInterface
     */
    apiCharacterGeneratePost(apiCharacterGeneratePostRequest: ApiCharacterGeneratePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiCharacterGeneratePost200Response>;

    /**
     * Generate a location image
     * @param {ApiLocationGeneratePostRequest} apiLocationGeneratePostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FCBApiInterface
     */
    apiLocationGenerateImagePost(apiLocationGeneratePostRequest: ApiLocationGeneratePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiCharacterGenerateImagePost200Response>;

    /**
     * Generate a location
     * @param {ApiLocationGeneratePostRequest} apiLocationGeneratePostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FCBApiInterface
     */
    apiLocationGeneratePost(apiLocationGeneratePostRequest: ApiLocationGeneratePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiLocationGeneratePost200Response>;

    /**
     * Generate character names
     * @param {ApiNameCharactersPostRequest} apiNameCharactersPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FCBApiInterface
     */
    apiNameCharactersPost(apiNameCharactersPostRequest: ApiNameCharactersPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiNameCharactersPost200Response>;

    /**
     * Generate store names
     * @param {ApiNameStoresPostRequest} apiNameStoresPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FCBApiInterface
     */
    apiNameStoresPost(apiNameStoresPostRequest: ApiNameStoresPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiNameStoresPost200Response>;

    /**
     * Generate tavern names
     * @param {ApiNameTavernsPostRequest} apiNameTavernsPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FCBApiInterface
     */
    apiNameTavernsPost(apiNameTavernsPostRequest: ApiNameTavernsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiNameTavernsPost200Response>;

    /**
     * Generate town names
     * @param {ApiNameTownsPostRequest} apiNameTownsPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FCBApiInterface
     */
    apiNameTownsPost(apiNameTownsPostRequest: ApiNameTownsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiNameTownsPost200Response>;

    /**
     * Generate an organization image
     * @param {ApiOrganizationGeneratePostRequest} apiOrganizationGeneratePostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FCBApiInterface
     */
    apiOrganizationGenerateImagePost(apiOrganizationGeneratePostRequest: ApiOrganizationGeneratePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiCharacterGenerateImagePost200Response>;

    /**
     * Generate an organization
     * @param {ApiOrganizationGeneratePostRequest} apiOrganizationGeneratePostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FCBApiInterface
     */
    apiOrganizationGeneratePost(apiOrganizationGeneratePostRequest: ApiOrganizationGeneratePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiOrganizationGeneratePost200Response>;

    /**
     * Get current backend version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FCBApiInterface
     */
    apiVersionGet(options?: RawAxiosRequestConfig): AxiosPromise<ApiVersionGet200Response>;

}

/**
 * FCBApi - object-oriented interface
 * @export
 * @class FCBApi
 * @extends {BaseAPI}
 */
export class FCBApi extends BaseAPI implements FCBApiInterface {
    /**
     * Generate a character image
     * @param {ApiCharacterGeneratePostRequest} apiCharacterGeneratePostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FCBApi
     */
    public apiCharacterGenerateImagePost(apiCharacterGeneratePostRequest: ApiCharacterGeneratePostRequest, options?: RawAxiosRequestConfig) {
        return FCBApiFp(this.configuration).apiCharacterGenerateImagePost(apiCharacterGeneratePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generate a character
     * @param {ApiCharacterGeneratePostRequest} apiCharacterGeneratePostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FCBApi
     */
    public apiCharacterGeneratePost(apiCharacterGeneratePostRequest: ApiCharacterGeneratePostRequest, options?: RawAxiosRequestConfig) {
        return FCBApiFp(this.configuration).apiCharacterGeneratePost(apiCharacterGeneratePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generate a location image
     * @param {ApiLocationGeneratePostRequest} apiLocationGeneratePostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FCBApi
     */
    public apiLocationGenerateImagePost(apiLocationGeneratePostRequest: ApiLocationGeneratePostRequest, options?: RawAxiosRequestConfig) {
        return FCBApiFp(this.configuration).apiLocationGenerateImagePost(apiLocationGeneratePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generate a location
     * @param {ApiLocationGeneratePostRequest} apiLocationGeneratePostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FCBApi
     */
    public apiLocationGeneratePost(apiLocationGeneratePostRequest: ApiLocationGeneratePostRequest, options?: RawAxiosRequestConfig) {
        return FCBApiFp(this.configuration).apiLocationGeneratePost(apiLocationGeneratePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generate character names
     * @param {ApiNameCharactersPostRequest} apiNameCharactersPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FCBApi
     */
    public apiNameCharactersPost(apiNameCharactersPostRequest: ApiNameCharactersPostRequest, options?: RawAxiosRequestConfig) {
        return FCBApiFp(this.configuration).apiNameCharactersPost(apiNameCharactersPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generate store names
     * @param {ApiNameStoresPostRequest} apiNameStoresPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FCBApi
     */
    public apiNameStoresPost(apiNameStoresPostRequest: ApiNameStoresPostRequest, options?: RawAxiosRequestConfig) {
        return FCBApiFp(this.configuration).apiNameStoresPost(apiNameStoresPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generate tavern names
     * @param {ApiNameTavernsPostRequest} apiNameTavernsPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FCBApi
     */
    public apiNameTavernsPost(apiNameTavernsPostRequest: ApiNameTavernsPostRequest, options?: RawAxiosRequestConfig) {
        return FCBApiFp(this.configuration).apiNameTavernsPost(apiNameTavernsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generate town names
     * @param {ApiNameTownsPostRequest} apiNameTownsPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FCBApi
     */
    public apiNameTownsPost(apiNameTownsPostRequest: ApiNameTownsPostRequest, options?: RawAxiosRequestConfig) {
        return FCBApiFp(this.configuration).apiNameTownsPost(apiNameTownsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generate an organization image
     * @param {ApiOrganizationGeneratePostRequest} apiOrganizationGeneratePostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FCBApi
     */
    public apiOrganizationGenerateImagePost(apiOrganizationGeneratePostRequest: ApiOrganizationGeneratePostRequest, options?: RawAxiosRequestConfig) {
        return FCBApiFp(this.configuration).apiOrganizationGenerateImagePost(apiOrganizationGeneratePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generate an organization
     * @param {ApiOrganizationGeneratePostRequest} apiOrganizationGeneratePostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FCBApi
     */
    public apiOrganizationGeneratePost(apiOrganizationGeneratePostRequest: ApiOrganizationGeneratePostRequest, options?: RawAxiosRequestConfig) {
        return FCBApiFp(this.configuration).apiOrganizationGeneratePost(apiOrganizationGeneratePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get current backend version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FCBApi
     */
    public apiVersionGet(options?: RawAxiosRequestConfig) {
        return FCBApiFp(this.configuration).apiVersionGet(options).then((request) => request(this.axios, this.basePath));
    }
}

