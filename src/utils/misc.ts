import { Topics, WindowTabType } from '@/types';

// sometimes topic ends up as a string (ex. when pulling from DOM), so this makes sure
//    it can always be compared properly (particuarly for use in switch or [].includes, etc.)
export function toTopic(topic: string | number | Topics | null | undefined): Topics | null {
  const castedTopic = typeof topic === 'string' ? parseInt(topic) as Topics : topic;

  return castedTopic ?? null;
}

export function toWindowTabType(type: string | number | WindowTabType | null | undefined): WindowTabType | null {
  const castedType = typeof type === 'string' ? parseInt(type) as WindowTabType : type;

  return castedType ?? null;
}

export function getTopicIcon(topic: string | number | Topics | null | undefined) {
  switch (toTopic(topic)) {
    case Topics.Character: 
      return 'fa-user';
    case Topics.Location: 
      return 'fa-location-dot';   //'fa-place-of-worship';
    case Topics.Organization: 
      return 'fa-flag';
    default: 
      return '';
  }
}

export function getTabTypeIcon(type: string | number | WindowTabType | null | undefined) {
  switch (toWindowTabType(type)) {
    case WindowTabType.World: 
      return 'fa-globe';
    case WindowTabType.Campaign: 
      return 'fa-signs-post';
    case WindowTabType.Session: 
      return 'fa-tent';
    case WindowTabType.PC: 
      return 'fa-user-ninja';
    case WindowTabType.Entry:
      throw new Error('Tried to use getTabTypeIcon() for Entry');
    default: 
      return '';
  }
}

/**
 * Take a string of text generated by an AI (which is formatted for safe display with whitespace-pre-wrap) and make it into proper HTML
 * to be stored in an editor.
 * This takes a string of text, splits it into lines, trims each line, filters out empty lines, and then wraps each line in a <p> tag.  The resulting
 * string is a string of HTML <p> tags, each containing one line of text.
 */
export function generatedTextToHTML(text: string) {
  return text
  // replace special characters
  .replace(/&/g, '&amp;')
  .replace(/</g, '&lt;')
  .replace(/>/g, '&gt;')
  .replace(/"/g, '&quot;')
  .replace(/'/g, '&#039;')

  // mark bold (for short descriptions)
  .replace(/\*\*(.*?)\*\*/g, '<b>$1</b>')

  // change newlines to paragraphs
  .split('\n')
  .map(line => line.trim())
  .filter(line => line.length > 0)
  .map(line => `<p>${line}</p>`)
  .join('');
}

/**
 * Convert HTML text back to plain text.  Most tags are stripped, but <br> and <p> become newlines.
 * This is the reverse of generatedTextToHTML, but they are not symmetric - you should not expect that calling both functions will give you your original text.
 * @param html HTML string 
 * @returns Plain text with newlines
 */
export function htmlToPlainText(html: string): string {
  if (!html) return '';

  const tempDiv = document.createElement('div');
  tempDiv.innerHTML = html;

  // Convert <br> and <p> to newlines before stripping tags
  tempDiv.querySelectorAll('br').forEach(br => br.replaceWith('\n'));
  tempDiv.querySelectorAll('p').forEach(p => {
    const newline = document.createTextNode('\n\n');
    p.appendChild(newline);
  });

  return tempDiv.textContent?.trim() ?? '';
}